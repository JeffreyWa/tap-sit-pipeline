apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  annotations:
    kapp.k14s.io/identity: v1;/carto.run/ClusterTemplate/deliverable-template;carto.run/v1alpha1
    kapp.k14s.io/original: '{"apiVersion":"carto.run/v1alpha1","kind":"ClusterTemplate","metadata":{"labels":{"app.tanzu.vmware.com/deliverable-type":"web","kapp.k14s.io/app":"1669691875572295792","kapp.k14s.io/association":"v1.1ffcda80f456c9e6f298bc5cfbbe05cb"},"name":"deliverable-template"},"spec":{"params":[{"default":{},"name":"registry"}],"ytt":"#@
      load(\"@ytt:data\", \"data\")\n#@ load(\"@ytt:assert\", \"assert\")\n\n#@ def
      merge_labels(fixed_values):\n#@   labels = {}\n#@   if hasattr(data.values.workload.metadata,
      \"labels\"):\n#@     labels.update(data.values.workload.metadata.labels)\n#@   end\n#@   labels.update(fixed_values)\n#@   return
      labels\n#@ end\n\n#@ def is_monorepo_approach():\n#@   if ''gitops_server_address''
      in data.values.params and ''gitops_repository_owner'' in data.values.params
      and ''gitops_repository_name'' in data.values.params:\n#@     return True\n#@   end\n#@   if
      ''gitops_server_address'' in data.values.params or ''gitops_repository_owner''
      in data.values.params or ''gitops_repository_name'' in data.values.params:\n#@     ''gitops_server_address''
      in data.values.params or assert.fail(\"missing param: gitops_server_address\")\n#@     ''gitops_repository_owner''
      in data.values.params or assert.fail(\"missing param: gitops_repository_owner\")\n#@     ''gitops_repository_name''
      in data.values.params or assert.fail(\"missing param: gitops_repository_name\")\n#@   end\n#@   return
      False\n#@ end\n\n#@ def has_git_params():\n#@   if ''gitops_repository_prefix''
      in data.values.params:\n#@     return True\n#@   end\n#@\n#@   if ''gitops_repository''
      in data.values.params:\n#@     return True\n#@   end\n#@\n#@   return False\n#@
      end\n\n#@ def is_gitops():\n#@   return is_monorepo_approach() or has_git_params()\n#@
      end\n\n#@ def param(key):\n#@   if not key in data.values.params:\n#@     return
      None\n#@   end\n#@   return data.values.params[key]\n#@ end\n\n#@ def strip_trailing_slash(some_string):\n#@   if
      some_string[-1] == \"/\":\n#@     return some_string[:-1]\n#@   end\n#@   return
      some_string\n#@ end\n\n#@ def mono_repository():\n#@   strip_trailing_slash(data.values.params.gitops_server_address)\n#@   return
      \"/\".join([\n#@     strip_trailing_slash(data.values.params.gitops_server_address),\n#@     strip_trailing_slash(data.values.params.gitops_repository_owner),\n#@     data.values.params.gitops_repository_name,\n#@   ])
      + \".git\"\n#@ end\n\n#@ def git_repository():\n#@   if is_monorepo_approach():\n#@     return
      mono_repository()\n#@   end\n#@\n#@   if ''gitops_repository'' in data.values.params:\n#@     return
      param(\"gitops_repository\")\n#@   end\n#@\n#@   prefix = param(\"gitops_repository_prefix\")\n#@   return
      prefix + data.values.workload.metadata.name + \".git\"\n#@ end\n\n#@ def image():\n#@   return
      \"/\".join([\n#@    data.values.params.registry.server,\n#@    data.values.params.registry.repository,\n#@    \"-\".join([\n#@      data.values.workload.metadata.name,\n#@      data.values.workload.metadata.namespace,\n#@      \"bundle\",\n#@    ])\n#@   ])
      + \":\" + data.values.workload.metadata.uid\n#@ end\n\n\n---\napiVersion: carto.run/v1alpha1\nkind:
      Deliverable\nmetadata:\n  name: #@ data.values.workload.metadata.name\n  labels:
      #@ merge_labels({ \"app.kubernetes.io/component\": \"deliverable\", \"app.tanzu.vmware.com/deliverable-type\":
      \"web\" })\nspec:\n  #@ if/end hasattr(data.values.workload.spec, \"serviceAccountName\"):\n  serviceAccountName:
      #@ data.values.workload.spec.serviceAccountName\n\n  #@ if/end is_gitops():\n  params:\n    -
      name: \"gitops_ssh_secret\"\n      value: #@ param(\"gitops_ssh_secret\")\n\n  source:\n    #@
      if/end is_gitops():\n    git:\n      url: #@ git_repository()\n      ref:\n        branch:
      #@ param(\"gitops_branch\")\n\n    #@ if/end not is_gitops():\n    image: #@
      image()\n\n    #@ if/end is_monorepo_approach():\n    subPath: #@ \"config/\"
      + data.values.workload.metadata.namespace + \"/\" + data.values.workload.metadata.name\n"}}'
    kapp.k14s.io/original-diff-md5: c6e94dc94aed3401b5d0f26ed6c0bff3
  creationTimestamp: "2022-11-29T03:17:55Z"
  generation: 1
  labels:
    app.tanzu.vmware.com/deliverable-type: web
    kapp.k14s.io/app: "1669691875572295792"
    kapp.k14s.io/association: v1.1ffcda80f456c9e6f298bc5cfbbe05cb
  name: deliverable-template
  resourceVersion: "9522063"
  uid: aa457a8c-35cf-4d79-8ab9-8694ac6e4d26
spec:
  params:
  - default: {}
    name: registry
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:assert", "assert")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def is_monorepo_approach():
    #@   if 'gitops_server_address' in data.values.params and 'gitops_repository_owner' in data.values.params and 'gitops_repository_name' in data.values.params:
    #@     return True
    #@   end
    #@   if 'gitops_server_address' in data.values.params or 'gitops_repository_owner' in data.values.params or 'gitops_repository_name' in data.values.params:
    #@     'gitops_server_address' in data.values.params or assert.fail("missing param: gitops_server_address")
    #@     'gitops_repository_owner' in data.values.params or assert.fail("missing param: gitops_repository_owner")
    #@     'gitops_repository_name' in data.values.params or assert.fail("missing param: gitops_repository_name")
    #@   end
    #@   return False
    #@ end

    #@ def has_git_params():
    #@   if 'gitops_repository_prefix' in data.values.params:
    #@     return True
    #@   end
    #@
    #@   if 'gitops_repository' in data.values.params:
    #@     return True
    #@   end
    #@
    #@   return False
    #@ end

    #@ def is_gitops():
    #@   return is_monorepo_approach() or has_git_params()
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def strip_trailing_slash(some_string):
    #@   if some_string[-1] == "/":
    #@     return some_string[:-1]
    #@   end
    #@   return some_string
    #@ end

    #@ def mono_repository():
    #@   strip_trailing_slash(data.values.params.gitops_server_address)
    #@   return "/".join([
    #@     strip_trailing_slash(data.values.params.gitops_server_address),
    #@     strip_trailing_slash(data.values.params.gitops_repository_owner),
    #@     data.values.params.gitops_repository_name,
    #@   ]) + ".git"
    #@ end

    #@ def git_repository():
    #@   if is_monorepo_approach():
    #@     return mono_repository()
    #@   end
    #@
    #@   if 'gitops_repository' in data.values.params:
    #@     return param("gitops_repository")
    #@   end
    #@
    #@   prefix = param("gitops_repository_prefix")
    #@   return prefix + data.values.workload.metadata.name + ".git"
    #@ end

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "bundle",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end

    #@ def parse_params():
    #@   params = []
    #@   if hasattr(data.values.workload.spec, "params"):
    #@     for i in range(len(data.values.workload.spec.params)):
    #@       params.append(data.values.workload.spec.params[i])
    #@     end   
    #@   end
    #@   return params
    #@ end


    #@ def parse_image():
    #@   for i in range(len(data.values.workload.status.resources)):
    #@     if data.values.workload.status.resources[i].name == "image-provider":
    #@       return data.values.workload.status.resources[i].outputs[0].preview
    #@     end 
    #@   end
    #@   return None    
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Deliverable
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "deliverable", "app.tanzu.vmware.com/deliverable-type": "web" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      #@ if/end is_gitops():
      params:
        - name: "gitops_ssh_secret"
          value: #@ param("gitops_ssh_secret")
        - name: "gitops_user_name"
          value: #@ param("gitops_user_name")
        - name: "gitops_user_email"
          value: #@ param("gitops_user_email")
        - name: "image"
          value: #@ parse_image()
        #@ if hasattr(data.values.workload.spec, "params"):
        #@ for i in range(len(data.values.workload.spec.params)):
        - name: #@ data.values.workload.spec.params[i].name
          value: #@ data.values.workload.spec.params[i].value
        #@ end
        #@ end
      source:
        #@ if/end is_gitops():
        git:
          url: #@ git_repository()
          ref:
            branch: #@ param("gitops_branch")

        #@ if/end not is_gitops():
        image: #@ image()

        #@ if/end is_monorepo_approach():
        subPath: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name
