---
apiVersion: v1
kind: Secret
metadata:
  name: ootb-templates-convention-tempalte-overlay
  namespace: tap-install
stringData:
  add-volume-support.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:struct", "struct")
    #@ load("@ytt:assert", "assert")    

    #@ def convention_template():
    kind: ClusterConfigTemplate
    metadata:
      name: convention-template
    #@ end

    #@overlay/match by=overlay.subset(convention_template())
    ---
    spec:
      #@overlay/match missing_ok=True
      ytt: |
        #@ load("@ytt:data", "data")
        #@ load("@ytt:yaml", "yaml")
        #@ load("@ytt:struct", "struct")
        #@ load("@ytt:assert", "assert")

        #@ def param(key):
        #@   if not key in data.values.params:
        #@     return None
        #@   end
        #@   return data.values.params[key]
        #@ end

        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     labels.update(data.values.workload.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def build_fixed_annotations():
        #@   fixed_annotations = { "developer.conventions/target-containers": "workload" }
        #@   if param("debug"):
        #@     fixed_annotations["apps.tanzu.vmware.com/debug"] = param("debug")
        #@   end
        #@   if param("live-update"):
        #@     fixed_annotations["apps.tanzu.vmware.com/live-update"] = param("live-update")
        #@   end
        #@   return fixed_annotations
        #@ end

        #@ def merge_annotations(fixed_values):
        #@   annotations = {}
        #@   if hasattr(data.values.workload.metadata, "annotations"):
        #@     # DEPRECATED: remove in a future release
        #@     annotations.update(data.values.workload.metadata.annotations)
        #@   end
        #@   if type(param("annotations")) == "dict" or type(param("annotations")) == "struct":
        #@     annotations.update(param("annotations"))
        #@   end
        #@   annotations.update(fixed_values)
        #@   return annotations
        #@ end
        
        ---
        apiVersion: conventions.carto.run/v1alpha1
        kind: PodIntent
        metadata:
          name: #@ data.values.workload.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "intent" })
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          template:
            metadata:
              annotations: #@ merge_annotations(build_fixed_annotations())
              labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
            spec:
              serviceAccountName: #@ data.values.params.serviceAccount
              containers:
                - name: workload
                  image: #@ data.values.image
                  securityContext:
                    runAsUser: 1000
                  #@ if hasattr(data.values.workload.spec, "env"):
                  env:
                    #@ for var in data.values.workload.spec.env:
                    - name: #@ var.name
                      #@ if/end hasattr(var, "value"):
                      value: #@ var.value
                      #@ if/end hasattr(var, "valueFrom"):
                      valueFrom: #@ var.valueFrom
                    #@ end
                  #@ end
                  #@ if/end hasattr(data.values.workload.spec, "resources"):
                  resources: #@ data.values.workload.spec["resources"]
                  #@ if/end param("livenessProbe"):
                  livenessProbe: #@ param("livenessProbe")
                  #@ if/end param("readinessProbe"):
                  readinessProbe: #@ param("readinessProbe")
                  #@ if/end param("volumeMounts"):
                  volumeMounts: #@ param("volumeMounts")
              #@ if/end param("volumes"):
              volumes: #@ param("volumes")
              #@ if/end param("terminationGracePeriodSeconds"):
              terminationGracePeriodSeconds: #@ param("volumes")

    #@ def server_template():
    kind: ClusterConfigTemplate
    metadata:
      name: server-template
    #@ end

    #@overlay/match by=overlay.subset(server_template())
    ---
    spec:
      #@overlay/match missing_ok=True
      ytt: |
        #@ load("@ytt:data", "data")
        #@ load("@ytt:yaml", "yaml")
        #@ load("@ytt:struct", "struct")
        #@ load("@ytt:assert", "assert")
        #@ load("@ytt:template", "template")

        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     labels.update(data.values.workload.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def param(key):
        #@   if not key in data.values.params:
        #@     return None
        #@   end
        #@   return data.values.params[key]
        #@ end        

        #@ def intOrString(v):
        #@   return v if type(v) == "int" else int(v.strip()) if v.strip().isdigit() else v
        #@ end

        #@ def merge_ports(ports_spec, containers):
        #@   ports = {}
        #@   for c in containers:
        #@     for p in getattr(c, "ports", []):
        #@       ports[p.containerPort] = {"targetPort": p.containerPort, "port": p.containerPort, "name": getattr(p, "name", str(p.containerPort))}
        #@     end
        #@   end
        #@   for p in ports_spec:
        #@     targetPort = getattr(p, "containerPort", p.port)
        #@     type(targetPort) in ("string", "int") or fail("containerPort must be a string or int")
        #@     targetPort = intOrString(targetPort)
        #@     
        #@     port = p.port
        #@     type(port) in ("string", "int") or fail("port must be a string or int")
        #@     port = int(port)
        #@     ports[p.port] = {"targetPort": targetPort, "port": port, "name": getattr(p, "name", str(p.port))}
        #@   end
        #@   return ports.values()
        #@ end

        #@ def delivery():
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: #@ data.values.workload.metadata.name
          annotations:
            kapp.k14s.io/update-strategy: "fallback-on-replace"
            ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
            #! kapp.k14s.io/change-rule: "upsert after upserting servicebinding.io/ServiceBindings"
          labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          selector:
            matchLabels: #@ data.values.config.metadata.labels
          template: #@ data.values.config
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: #@ data.values.workload.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          selector: #@ data.values.config.metadata.labels
          ports:
          #@ hasattr(data.values.params, "ports") and len(data.values.params.ports) or assert.fail("one or more ports param must be provided.")
          #@ declared_ports = {}
          #@ if "ports" in data.values.params:
          #@   declared_ports = data.values.params.ports
          #@ else:
          #@   declared_ports = struct.encode([{ "containerPort": 8080, "port": 8080, "name": "http"}])
          #@ end
          #@ for p in merge_ports(declared_ports, data.values.config.spec.containers):
          - #@ p
          #@ end
        ---
        #@ end

        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: #@ data.values.workload.metadata.name + "-server"
          labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
        data:
          #@ if param("ingress"):
          delivery.yml: #@ yaml.encode(delivery()) + "\n---\n" + yaml.encode(param("ingress"))
          #@ else:
          delivery.yml: #@ yaml.encode(delivery())
          #@ end
