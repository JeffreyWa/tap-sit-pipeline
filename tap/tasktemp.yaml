---
# Copyright 2023 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@ load("@ytt:data", "data")

apiVersion: carto.run/v1alpha1
kind: ClusterDeploymentTemplate
metadata:
  name: integration-test
spec:
  params:
    - name: integration_testing_matching_labels
      default: 
        apps.tanzu.vmware.com/pipeline: int-test
  observedCompletion:
    failed:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "False"
    succeeded:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "True"
  ytt: |
    #@ load("@ytt:data", "data")
    #@ def url():
    #@   return data.values.deployment.url
    #@ end

    #@ def test_source_url():
    #@   return "http://fluxcd-source-controller.flux-system.svc.cluster.local./gitrepository/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name + "/latest.tar.gz"
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def merged_tekton_params():
    #@   params = []
    #@   if hasattr(data.values, "params") and hasattr(data.values.params, "integration-testing_pipeline_params"):
    #@     for param in data.values.params["integration-testing_pipeline_params"]:
    #@       params.append({ "name": param, "value": data.values.params["integration-testing_pipeline_params"][param] })
    #@     end
    #@   end
    #@   params.append({ "name": "url", "value": url() })
    #@   params.append({ "name": "test_source_url", "value": test_source_url() })
    #@   return params
    #@ end    
    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-integration-test"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "test" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName
      
      runTemplateRef:
        name: tekton-deployment-pipelinerun
        kind: ClusterRunTemplate

      selector:
        resource:
          apiVersion: tekton.dev/v1beta1
          kind: Pipeline

        #@ hasattr(data.values.params, "integration_testing_matching_labels") or fail("integration_testing_matching_labels param is required")
        matchingLabels: #@ data.values.params["integration_testing_matching_labels"] or fail("integration_testing_matching_labels param cannot be empty")

      inputs:
        url: #@ url() or fail("no configuration url")
        tekton-params: #@ merged_tekton_params()

---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: tekton-deployment-pipelinerun
spec:
  outputs:
    url: spec.params[?(@.name=="url")].value
  template:
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: $(runnable.metadata.name)$-
      labels: $(runnable.metadata.labels)$
    spec:
      params: $(runnable.spec.inputs.tekton-params)$
      pipelineRef:
        name: $(selected.metadata.name)$