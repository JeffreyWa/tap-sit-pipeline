---
# Copyright 2023 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@ load("@ytt:data", "data")

apiVersion: carto.run/v1alpha1
kind: ClusterDeploymentTemplate
metadata:
  name: integration-test
spec:
  params:
    - name: git_int_testing_repo
      default: ""
    - name: git_int_testing_rev
      default: ""
    - name: git_repo_skip_host_checking
      default: true
    - name: git_int_testing_url
      default: ""
    - name: git_writer_ssh_variant
      default: ssh
  observedCompletion:
    failed:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "False"
    succeeded:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "True"
  ytt: |
    #@ load("@ytt:data", "data")
    #@ def url():
    #@   return data.values.deployment.url
    #@ end
    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-integration-test"
    spec:
        serviceAccountName: default
        runTemplateRef:
          name: integration-test
        inputs:
          url: #@ url()
          git_int_testing_repo: #@ data.values.params.git_int_testing_repo
          git_int_testing_repo_branch: #@ data.values.params.git_int_testing_rev
          skip_host_checking: #@ data.values.params.git_repo_skip_host_checking
          git_ssh_variant: ssh
          app_domain: #@ data.values.params.git_int_testing_url

---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: integration-test
spec:
  serviceAccountName: #@ data.values.service_account_name
  #outputs:
  #  pipeline-result: status.conditions[?(@.type=="Succeeded")].status == "True"
  template:
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: $(runnable.metadata.name)$-
    spec:
      workspaces:
        - name: source
          emptyDir: {}
        - name: ssh-directory
          secret:
            secretName: git-ssh-secret
      taskSpec:
        workspaces:
          - name: source
          - name: ssh-directory
        steps:
          - name: fetch-repo
            ##'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.41.1'
            image: 'harbor.h2o-4-2180.h2o.vmware.com/apps/git-init:latest'
            resources: {}
            env:
              - name: PARAM_URL
                value: "$(runnable.spec.inputs.git_int_testing_repo)$"
              - name: PRRAM_BRANCH
                value: "$(runnable.spec.inputs.git_int_testing_repo_branch)$"
              - name: GIT_SSH_VARIANT
                value: "$(runnable.spec.inputs.git_ssh_variant)$"
              - name: CHECKOUT_DIR
                value: "$(workspaces.source.path)"
              - name: DELI_URL
                value: "$(runnable.spec.inputs.url)$"
            script: |
              #!/usr/bin/env sh
              set -eux
              echo ${DELI_URL}
              exit 0

              ##if [[ -n "${SKIP_HOST_CHECK}" && "${SKIP_HOST_CHECK}" = true ]]
              ##then
              ##  export GIT_SSH_COMMAND="ssh -i $(workspaces.ssh-directory.path)/ssh-privatekey -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
              ##fi
              ##if [[ -n "${GIT_SSH_VARIANT}" ]]
              ##then
              ##  export GIT_SSH_VARIANT="${GIT_SSH_VARIANT}"
              ##fi

              echo ${PARAM_URL}
              echo ${PRRAM_BRANCH}
              echo ${CHECKOUT_DIR}
              export GIT_SSH_COMMAND="ssh -i $(workspaces.ssh-directory.path)/ssh-privatekey -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
              echo ${GIT_SSH_COMMAND}
              /ko-app/git-init \
              -url="${PARAM_URL}" \
              -revision="${PRRAM_BRANCH}" \
              -path="${CHECKOUT_DIR}"

              cd "${CHECKOUT_DIR}"
              ls -al

          #- name: integration-test
          #  ##gcr.io/cloud-builders/mvn@sha256:69fa58eaf83abbd7ed29cbbcbd3252dae28b029f8fdea1a5dbad98c517aeaf54
          #  image: harbor.h2o-4-2180.h2o.vmware.com/apps/mvn:latest
          #  env:
          #    - name: PARAM_APP_DOMAIN
          #      value: "$(runnable.spec.inputs.app_domain)$"
          #  workingDir: $(workspaces.source.path)
          #  command: ["/usr/bin/mvn"]
          #  args:
          #    - test
          #    - -Durl=$(PARAM_APP_DOMAIN)
