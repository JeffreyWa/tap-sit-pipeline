---
# Copyright 2023 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@ load("@ytt:data", "data")

apiVersion: carto.run/v1alpha1
kind: ClusterDeploymentTemplate
metadata:
  name: deploy-sit
spec:
  params:
    - name: git_repo_skip_host_checking
      default: true
    - name: git_writer_ssh_variant
      default: ssh
    - name: gitops_user_name
      default: Jeffrey
    - name: gitops_user_email
      default: jeff@vmw.com
    - name: actest-namespace
      default: ""
    - name: git_commit_message
      default: "sit deploy"
    - name: actest-namespace
      default: ""
    - name: image
      default: ""
  observedCompletion:
    failed:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "False"
    succeeded:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "True"
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")
    #@ load("@ytt:base64", "base64")
    #@ load("@ytt:assert", "assert")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def is_monorepo_approach():
    #@   return True
    #@ end

    #@ def is_gitops():
    #@   return True
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def git_repository():
    #@   return data.values.workload.spec.source.git.url
    #@ end

    #@ def git_repository_branch():
    #@   return data.values.workload.spec.source.git.ref.branch
    #@ end


    #@ load("@ytt:data", "data")
    #@ def url():
    #@   return data.values.deployment.url
    #@ end
    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable 
    metadata:
      name: #@ data.values.workload.metadata.name + "-deploy-sit"
      #! ## labels: #@ merge_labels({ "app.kubernetes.io/component": "deploy-sit" })
    spec:
      serviceAccountName: default
      runTemplateRef:
        name: deploy-sit
      inputs:
        #! sit_testing: #@ data.values
        #@ if is_gitops():
        url: #@ url()
        #! image: #@ param("image")
        git_repository: #@ git_repository()
        git_branch: #@ git_repository_branch()
        git_user_name:  #@ param("gitops_user_name")
        git_user_email: #@ param("gitops_user_email")
        git_commit_message: #@ param("gitops_commit_message")
        sub_path: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name
        sit_sub_path: #@ "config/" + param("actest-namespace") + "/" + data.values.workload.metadata.name
        sit_namespace: #@ param("actest-namespace")         
        #@ end
---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: deploy-sit
spec:
  #serviceAccountName: default
  template:
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: $(runnable.metadata.name)$-
    spec:
      params:
      - name: git_repository
        value: $(runnable.spec.inputs.git_repository)$
      - name: git_branch
        value: $(runnable.spec.inputs.git_branch)$
      - name: git_user_email
        value: $(runnable.spec.inputs.git_user_name)$
      - name: git_user_name
        value: $(runnable.spec.inputs.git_user_email)$
      - name: git_commit_message
        value: $(runnable.spec.inputs.git_repository)$
      - name: sub_path
        value: $(runnable.spec.inputs.sub_path)$
      - name: sit_sub_path
        value: $(runnable.spec.inputs.sit_sub_path)$
      - name: url
        value: $(runnable.spec.inputs.url)$
      workspaces:
        - name: source
          emptyDir: {}
        - name: ssh-directory
          secret:
            secretName: git-ssh-secret
      taskSpec:
        workspaces:
          - name: source
          - name: ssh-directory
        params:
          - name: git_repository 
          - name: git_branch 
          - name: git_user_email 
          - name: git_user_name 
          - name: git_commit_message 
          - name: sub_path
          - name: sit_sub_path 
          - name: url
        steps:
          - name: update-sit-image
            ##'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.41.1'
            image: 'harbor.h2o-4-2180.h2o.vmware.com/tap-install/tap-packages@sha256:b97474e8b8504f3602150e60d868890332585f3304cfd55d5f007a5ea5feb37a'
            resources: {}
            script: |
              #!/usr/bin/env bash

              ## set -o errexit
              set -o xtrace

              echo $(params.url)
              echo $(credentials.path)
              echo $(params.git_repository)
              echo $(params.sit_sub_path)
              

              ssh_config_file=$(mktemp)

              echo "
              UserKnownHostsFile /tekton/creds/.ssh/known_hosts
              Include $(credentials.path)/.ssh/config
              " > $ssh_config_file

              export GIT_SSH_COMMAND="ssh -F $ssh_config_file"

              cd `mktemp -d`
              mkdir manifest

             
              if git clone --depth 1 -b "$(params.git_branch)" "$(params.git_repository)" ./repo; then
                cd ./repo
              else
                git clone --depth 1 "$(params.git_repository)" ./repo
                cd ./repo
                git checkout -b "$(params.git_branch)"
              fi

              cp -r * ../manifest/
              git checkout -b act
              git pull origin act --rebase
              cp -r ../manifest/* .
              

              git config user.email "$(params.git_user_email)"
              git config user.name "$(params.git_user_name)"

              #if [ -d "$(params.sit_sub_path)" ]; then
              #  echo "Directory exists, update"
              #  diff -q $(params.sit_sub_path)/delivery.yml $(params.sub_path)/delivery.yml
              #  if [ $? == 0 ]; then
              #    exit 0
              #  fi  
              #else
              #  echo "Create sit config direcotry"
              #  mkdir -p $(params.sit_sub_path) && rm -rf $(params.sit_sub_path)/*
              #fi
              #cp $(params.sub_path)/* $(params.sit_sub_path)

              #git add $(params.sit_sub_path)/*

              git add . 
              git commit -m "$(params.git_commit_message)" --allow-empty
             
              git push -f origin act
