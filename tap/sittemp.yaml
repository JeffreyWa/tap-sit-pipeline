---
# Copyright 2023 VMware
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#@ load("@ytt:data", "data")

apiVersion: carto.run/v1alpha1
kind: ClusterDeploymentTemplate
metadata:
  name: deploy-act
spec:
  params:
    - name: serviceAccount
      default: default
    - name: git_repo_skip_host_checking
      default: true
    - name: git_writer_ssh_variant
      default: ssh
    - name: gitops_user_name
      default: vmware_taiwan_pso
    - name: gitops_user_email
      default: vmware_taiwan_pso@vmware.com
    - name: actest-namespace
      default: ""
    - name: git_commit_message
      default: "act deploy"
    - name: image
      default: ""
  observedCompletion:
    failed:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "False"
    succeeded:
      key: .status.conditions[?(@.type=="Ready")].status
      #key: .status.pipeline-result
      value: "True"
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")
    #@ load("@ytt:base64", "base64")
    #@ load("@ytt:assert", "assert")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def is_monorepo_approach():
    #@   return True
    #@ end

    #@ def is_gitops():
    #@   return True
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def git_repository():
    #@   return data.values.workload.spec.source.git.url
    #@ end

    #@ def git_repository_branch():
    #@   return data.values.workload.spec.source.git.ref.branch
    #@ end


    #@ load("@ytt:data", "data")
    #@ def url():
    #@   return data.values.deployment.url
    #@ end
    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable 
    metadata:
      name: #@ data.values.workload.metadata.name + "-deploy-act"
      #! ## labels: #@ merge_labels({ "app.kubernetes.io/component": "deploy-act" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName
      runTemplateRef:
        name: deploy-act
      inputs:
        #! sit_testing: #@ data.values
        #@ if is_gitops():
        url: #@ url()
        #! image: #@ param("image")
        serviceAccount: #@ data.values.params.serviceAccount
        git_repository: #@ git_repository()
        git_branch: #@ git_repository_branch()
        git_user_name:  #@ param("gitops_user_name")
        git_user_email: #@ param("gitops_user_email")
        git_commit_message: #@ param("gitops_commit_message")
        sub_path: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name
        sit_sub_path: #@ "config/" + param("actest-namespace") + "/" + data.values.workload.metadata.name
        next_namespace: #@ param("actest-namespace")
        namespace: #@ data.values.workload.metadata.namespace
        workloadname: #@ data.values.workload.metadata.name
        gitops_ssh_secret: #@ param("gitops_ssh_secret")
        #@ end
---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: deploy-act
spec:
  template:
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: $(runnable.metadata.name)$-
    spec:
      serviceAccountName: $(runnable.spec.inputs.serviceAccount)$
      params:
      - name: git_repository
        value: $(runnable.spec.inputs.git_repository)$
      - name: git_branch
        value: $(runnable.spec.inputs.git_branch)$
      - name: git_user_email
        value: $(runnable.spec.inputs.git_user_name)$
      - name: git_user_name
        value: $(runnable.spec.inputs.git_user_email)$
      - name: git_commit_message
        value: $(runnable.spec.inputs.git_repository)$
      - name: sub_path
        value: $(runnable.spec.inputs.sub_path)$
      - name: sit_sub_path
        value: $(runnable.spec.inputs.sit_sub_path)$
      - name: url
        value: $(runnable.spec.inputs.url)$
      - name: namespace
        value: $(runnable.spec.inputs.namespace)$
      - name: next_namespace
        value: $(runnable.spec.inputs.next_namespace)$
      - name: workloadname
        value: $(runnable.spec.inputs.workloadname)$
      workspaces:
        - name: source
          emptyDir: {}
        - name: ssh-directory
          secret:
            secretName: $(runnable.spec.inputs.gitops_ssh_secret)$
      taskSpec:
        workspaces:
          - name: source
          - name: ssh-directory
        params:
          - name: git_repository 
          - name: git_branch 
          - name: git_user_email
          - name: git_user_name 
          - name: git_commit_message 
          - name: sub_path
          - name: sit_sub_path 
          - name: url
          - name: namespace
          - name: workloadname
        steps:
          - name: update-act-image
            # image: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.41.1'
            image: harbor.lab.tw/tap/tap-packages-14@sha256:72dddaea72f572810d325aa6754da040d5d00e246f11cfdd1a7bcefdca071e43
            resources: {}
            script: |
              #!/usr/bin/env bash
              echo "$(params.url)"
              set -o errexit
              set -o xtrace

              ssh_config_file=$(mktemp)

              echo "
              UserKnownHostsFile /tekton/creds/.ssh/known_hosts
              Include $(credentials.path)/.ssh/config
              " > $ssh_config_file

              export GIT_SSH_COMMAND="ssh -F $ssh_config_file"

              cd `mktemp -d`

              if git clone --depth 1 -b "dev" "$(params.git_repository)" ./repo; then
                cd ./repo
              else
                git clone --depth 1 "$(params.git_repository)" ./repo
                cd ./repo
                git checkout -b "dev"
              fi
              
              git config user.email "$(params.git_user_email)"
              git config user.name "$(params.git_user_name)"
              
              mkdir -p ./config/$(params.next_namespace)/$(params.workloadname)
              cp ./config/$(params.namespace)/$(params.workloadname)/delivery.yml ./config/$(params.next_namespace)/$(params.workloadname)/delivery.yml
              # sed -i 's/harbor\.lab\.tw/harbor\.prod\.tw/g' ./config/$(params.next_namespace)/$(params.workloadname)/delivery.yml
              cat ./config/$(params.next_namespace)/$(params.workloadname)/delivery.yml

              git add ./config/$(params.next_namespace)/$(params.workloadname)/delivery.yml

              git commit -m "update delivery.yml for accetance namespace" --allow-empty
              git checkout -b "act"
              
              git merge dev
              git push origin act --force